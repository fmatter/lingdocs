[paths]

# the folder containing your text files
content = content

# the folder containing text files not (currently) included in the project
bench = bench

# the YAML file which stores your document structure
# if this is only a filename, it is assumed to be in the content folder
structure_file = structure.yaml

# the folder to which output is written 
output = output

# the folder where CSV for tables are stored
tables = tables 

# the folder where your images are stored
figures = figures

# the table metadata file
# if this is a plain filename, it is assumed to be in the tables folder
table_metadata = table_metadata.yaml

figure_metadata = figure_metadata.yaml

# the path to the CLDF metadata file 
cldf = ./cldf/metadata.json

# the path to the manual example folder
manual_examples = ./manual_examples

# path to bibfile not contained in the dataset
add_bib = pld_references.bib


[output]

# what formats should be built
build = latex mkdocs html plain

# what formats should be built as preview
preview = plain html

# create a README.md file?
readme = True

# create index and detail pages for database entities?
# note 1: this option will be True if <rich> below is True
# note 2: you can point this to a different CLDF metadata.json
# file
data = False

# insert links to this data? (slow)
rich = False

# what layout to use
layout = book

[plain]


[latex]

article = article

book = book

interlinear_tool = expex


[clld]

# URI to the database of your CLLD app
db_uri = /uri/to/your/database


[html]


[mkdocs]


[input]

# where your local glossing abbreviations are stored
abbreviation_file = abbreviations.csv

# how your filenames should be prefixed, if at all
content_file_prefix = None


[examples]

# show the language label? (can be overridden)
show_language = True

# show the Primary_Text line? (can be overridden)
show_primary = True

# where to place the source?
# after_translation / in_preamble
source_position = after_translation


[lfts]
# different kinds of entities whose inline representation is: (language) form (‘translation’) ((source))
show_language = True
show_translation = True
show_source = True