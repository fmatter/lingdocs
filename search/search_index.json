{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"pylingdocs","text":"<p>Create data-rich linguistic documents with CLDF, with a variety of output formats.</p> <p> </p>"},{"location":"#about","title":"About","text":"<p>Linguistic documents usually contain linguistic data, be it from primary research or sourced from the literature. The primary function of pylingdocs is to make the integration of such data as simple as possible. To achieve this, all data is stored in a CLDF dataset, while the accompanying prose is written in markdown. This means that the document that contains no linguistic data, only pointers to the dataset. Changes to the data only have to be done in the dataset, and don't include tinkering with the document. Presentation of the data in the document is done by templates, </p> <ul> <li>no more manually italicizing object language forms. The use of markdown and opinionated-but-customizable output templates results in separation of content and presentation in general.</li> </ul> <p>To illustrate, this plain text in combination with this dataset can be turned into multiple formats:</p> <ul> <li>PDF</li> <li>HTML with MkDocs</li> <li>Github markdown</li> <li>and yes, even plain text</li> </ul> <p>It is also possible to integrate the output into CLLD web apps, using the clld-document-plugin; an example can be inspected here.</p>"},{"location":"#quickstart","title":"\ud83d\udd25 Quickstart","text":"<ol> <li><code>pip install pylingdocs</code> (full installation guide)</li> <li>create or get a CLDF dataset</li> <li><code>pylingdocs new</code>, point to <code>metadata.json</code> file</li> <li><code>pylingdocs preview</code></li> </ol>"},{"location":"changes/","title":"Changelog","text":"<p>All notable changes to this project will be documented in this file.</p> <p>The format is based on Keep a Changelog, and this project adheres to Semantic Versioning.</p>"},{"location":"changes/#unreleased","title":"Unreleased","text":""},{"location":"changes/#011-2023-10-13","title":"0.1.1 - 2023-10-13","text":""},{"location":"changes/#fixed","title":"Fixed","text":"<ul> <li>the entire new project template</li> <li>a bug with the <code>-targets</code> argument</li> <li><code>rich</code> option automatically makes <code>data</code> true</li> </ul>"},{"location":"changes/#changed","title":"Changed","text":"<ul> <li><code>extra</code> directory for user material</li> <li>also, preview reloading is sensitive to it</li> <li><code>extra/landingpage.md</code> and <code>extra/&lt;FORMAT&gt;_landingpage.md</code></li> </ul>"},{"location":"changes/#010-2023-10-12","title":"0.1.0 - 2023-10-12","text":""},{"location":"changes/#added","title":"Added","text":"<ul> <li>mkdocs template</li> <li>proper layout (<code>book</code>/<code>article</code>/<code>slides</code>) handling</li> </ul>"},{"location":"changes/#fixed_1","title":"Fixed","text":"<ul> <li>multipart LaTeX examples</li> </ul>"},{"location":"changes/#changed_1","title":"Changed","text":"<ul> <li>more straightforward customization</li> <li>configuration with <code>.yaml</code> file rather than <code>.cfg</code></li> <li>improved template loading</li> <li>mkdocs for documentation</li> <li>new expex-acro version</li> <li><code>builders</code> settings is now named <code>build</code></li> <li>makeover for CLI</li> <li><code>contents</code> folder is now called <code>docs</code></li> </ul>"},{"location":"changes/#0012-2023-07-02","title":"0.0.12 - 2023-07-02","text":""},{"location":"changes/#added_1","title":"Added","text":"<ul> <li>table of contents in markdown output</li> <li>option to choose LaTeX <code>book</code> template</li> <li>leipzig glossing abbreviations</li> <li>add additional external chapters when creating a CLDF dataset</li> <li><code>topics_index.csv</code> will be added as a TopicTable</li> <li><code>entity_refs.yaml</code> allows to add section references to entries in the database</li> <li><code>full</code> argument for citations</li> <li><code>bare</code> argument for exrefs</li> <li>one-stop solution for example layouting</li> </ul>"},{"location":"changes/#fixed_2","title":"Fixed","text":"<ul> <li>LaTeX examples</li> <li>handling of abbreviations</li> <li>revamped document commands</li> <li>abbrev checking</li> <li>lfts macro</li> <li>bib additions</li> <li>default table metadata</li> <li>datasets without sources work now</li> </ul>"},{"location":"changes/#changed_2","title":"Changed","text":"<ul> <li>if undefined, <code>LATEX_TOPLEVEL</code> is determined based on the LaTeX template</li> <li>using cldf-ldd</li> <li>better HTML output</li> </ul>"},{"location":"changes/#0011-2022-11-27","title":"0.0.11 - 2022-11-27","text":""},{"location":"changes/#added_2","title":"Added","text":"<ul> <li>in the table metadata file, <code>header_column</code> can be set to <code>false</code> if the first column should be treated as a \"content\" column</li> <li>more sophisticated citing facilities</li> <li>cldf dataset creation with <code>ChapterTable</code></li> <li>option to create sublime autocompletion data upon project initialization</li> </ul>"},{"location":"changes/#removed","title":"Removed","text":""},{"location":"changes/#changed_3","title":"Changed","text":"<ul> <li>if a non-existing table is requested, a CSV file is generated</li> <li>HTML: smaller font sizes for titles</li> <li>HTML: center align figures</li> <li>HTML: more line spacing in table cells (when using line breaks)</li> </ul>"},{"location":"changes/#fixed_3","title":"Fixed","text":"<ul> <li>unglossed words don't throw errors</li> </ul>"},{"location":"changes/#0010-2022-10-15","title":"0.0.10 - 2022-10-15","text":""},{"location":"changes/#added_3","title":"Added","text":"<ul> <li>methods for reading and writing project configuration files</li> </ul>"},{"location":"changes/#009-2022-09-19","title":"0.0.9 - 2022-09-19","text":""},{"location":"changes/#changed_4","title":"Changed","text":"<ul> <li>more informative <code>check</code> function, now with offending files and lines</li> <li><code>src</code> and <code>psrc</code> in clld table captions</li> <li>lowercase <code>paths</code> and <code>output</code> sections in config file</li> </ul>"},{"location":"changes/#fixed_4","title":"Fixed","text":"<ul> <li>preview function again</li> <li>apply cell decoration to content cells only</li> <li>don't apply cell decoration to empty cells</li> <li><code>update-structure</code> adapted to new structure handling</li> <li>make relative path in setup wizard relative to CLDF dataset</li> </ul>"},{"location":"changes/#008-2022-08-23","title":"0.0.8 - 2022-08-23","text":""},{"location":"changes/#added_4","title":"Added","text":"<ul> <li>sources in sublime text data</li> </ul>"},{"location":"changes/#fixed_5","title":"Fixed","text":"<ul> <li>preview function</li> </ul>"},{"location":"changes/#007-2022-08-20","title":"0.0.7 - 2022-08-20","text":""},{"location":"changes/#fixed_6","title":"Fixed","text":"<ul> <li>default HTML pandoc output should be \"html\"</li> </ul>"},{"location":"changes/#006-2022-08-20","title":"0.0.6 - 2022-08-20","text":""},{"location":"changes/#added_5","title":"Added","text":"<ul> <li><code>pre_cell</code> and <code>post_cell</code> keywords in table metadata to apply markdown to entire table</li> <li><code>pylingdocs author-config</code> command</li> <li><code>add_bib</code> option for adding external sources</li> <li>figures functionality</li> <li>support for GUI editor</li> <li>experimental reveal.js output</li> <li>cognate set model &amp; some templates</li> <li>cognate set coloring with @LinguList's JS code</li> </ul>"},{"location":"changes/#removed_1","title":"Removed","text":"<ul> <li>text cldf metadata (now in clld-corpus-plugin)</li> </ul>"},{"location":"changes/#changed_5","title":"Changed","text":"<ul> <li>simpler document structure</li> </ul>"},{"location":"changes/#005-2022-07-21","title":"0.0.5 - 2022-07-21","text":""},{"location":"changes/#added_6","title":"Added","text":"<ul> <li>HTML preview with autorefresh</li> <li>preview in CLLD apps with clld-document-plugin</li> <li><code>end</code> argument for crossrefs</li> <li>markdown in table captions</li> <li>section anchors for github</li> <li>language-form-translation-source template</li> <li>hide todos in releases</li> </ul>"},{"location":"changes/#changed_6","title":"Changed","text":"<ul> <li>table metadata are stored in human-friendlier YAML</li> </ul>"},{"location":"changes/#fixed_7","title":"Fixed","text":"<ul> <li>don't split articles and slides</li> <li>whitespace in github output</li> <li>various small things</li> </ul>"},{"location":"changes/#004-2022-06-03","title":"0.0.4 - 2022-06-03","text":""},{"location":"changes/#added_7","title":"Added","text":"<ul> <li><code>todo</code> text command</li> <li>IGT examples as part of manual multipart examples</li> <li><code>check</code> terminal command</li> <li>TOC in HTML output</li> </ul>"},{"location":"changes/#removed_2","title":"Removed","text":"<ul> <li>bugs</li> </ul>"},{"location":"changes/#changed_7","title":"Changed","text":"<ul> <li>nicer LaTeX memoir template</li> </ul>"},{"location":"changes/#003-2022-05-27","title":"0.0.3 - 2022-05-27","text":""},{"location":"changes/#added_8","title":"Added","text":"<ul> <li>manual (i.e., non-interlinear) examples (<code>[manex](id)</code>)</li> <li>references in LaTeX and HTML IGT examples</li> <li>proper handling of glossing abbreviations in LaTeX and HTML output</li> <li>better exref commands (with arguments <code>end</code> and <code>suffix</code>)</li> <li>allow custom models and model templates</li> <li>allow custom output templates</li> <li>LaTeX memoir template</li> </ul>"},{"location":"changes/#removed_3","title":"Removed","text":"<ul> <li>many small bugs</li> </ul>"},{"location":"changes/#changed_8","title":"Changed","text":"<ul> <li>prettier LaTeX layouting</li> <li>HTML layout</li> <li><code>wf</code> shortcut for forms</li> <li>relative file paths, <code>-source</code> should work now</li> </ul>"},{"location":"changes/#002-2022-05-20","title":"0.0.2 - 2022-05-20","text":""},{"location":"changes/#added_9","title":"Added","text":"<ul> <li>generate data for the Sublime Text plugin with <code>pylingdocs sublime</code></li> <li>create a new project with <code>pylingdocs new</code></li> <li>prettier plaintext example rendering</li> <li>use pandoc throughout</li> <li>expanded demo document</li> <li>multicite (LaTeX only, WIP)</li> <li>new options:<ul> <li><code>readme</code></li> <li><code>citation_cff</code></li> </ul> </li> <li>new default models:<ul> <li>Form</li> <li>Cognateset</li> </ul> </li> <li>new templates:<ul> <li>LaTeX <code>handout</code></li> </ul> </li> <li><code>-latex</code> option for the <code>build</code> and <code>preview</code> commands</li> <li><code>-release</code> option for better citability</li> <li>better HTML</li> <li>expex-acro in LaTeX templates</li> </ul>"},{"location":"changes/#removed_4","title":"Removed","text":"<ul> <li>various bugs</li> <li>CITATION.CFF</li> <li>some CLDF metadata (now in clld-morphology-plugin)</li> </ul>"},{"location":"changes/#changed_9","title":"Changed","text":"<ul> <li>if the <code>structure_file</code> and <code>table_md</code> paths are only files, they are assumed to be in the content and tables folders, respectively </li> </ul>"},{"location":"changes/#001-2022-04-26","title":"0.0.1 - 2022-04-26","text":"<p>Initial release.</p>"},{"location":"commands/","title":"Commands","text":""},{"location":"commands/#commands","title":"Commands","text":"<p>You can see a list of commands by running <code>pylingdocs --help</code>; you can see information for an individual command by running <code>pylingdocs &lt;COMMAND&gt; --help</code>.</p>"},{"location":"commands/#build","title":"build","text":"<p>Create formatted output of pylingdocs project.</p> <p>Usage:</p> <pre><code>build [OPTIONS]\n</code></pre> <p>Options:</p> <pre><code>  --targets TEXT     List of target output formats.\n  --release          Prepare for a citeable release\n  --output-dir PATH  Folder where output is generated.  [default: output]\n  --source PATH      Source folder to process.  [default: .]\n  --cldf TEXT        Path to metadata.json of CLDF dataset.\n  --help             Show this message and exit.\n</code></pre>"},{"location":"commands/#preview","title":"preview","text":"<p>Create a live preview using a lightweight, human-readable output format</p> <p>Usage:</p> <pre><code>preview [OPTIONS]\n</code></pre> <p>Options:</p> <pre><code>  --target TEXT      Output format for the preview.\n  --refresh BOOLEAN  Re-render preview on file change.  [default: True]\n  --output-dir PATH  Folder where output is generated.  [default: output]\n  --source PATH      Source folder to process.  [default: .]\n  --cldf TEXT        Path to metadata.json of CLDF dataset.\n  --help             Show this message and exit.\n</code></pre>"},{"location":"commands/#new","title":"new","text":"<p>Create a new pylingdocs project.</p> <p>Usage:</p> <pre><code>new [OPTIONS]\n</code></pre> <p>Options:</p> <pre><code>  --help  Show this message and exit.\n</code></pre>"},{"location":"config/","title":"Configuration","text":"<p>By default, <code>pylingdocs</code> uses the config file shown below. The values in it can be overridden by creating a file <code>pylingdocs.cfg</code> in the directory where you are executing <code>pylingdocs</code>.</p>"},{"location":"config/#output","title":"Output","text":"<p>General options relating to the produced output.</p>"},{"location":"config/#formats","title":"Formats","text":"<p>What formats should be built?</p> Default:<pre><code>output:\n  build:\n    - latex\n    - mkdocs\n    - html\n    - plain\n</code></pre>"},{"location":"config/#preview","title":"Preview","text":"<p>What format should be used for previewing.</p> Default:<pre><code>output:\n  preview: 'mkdocs'\n</code></pre>"},{"location":"config/#readme","title":"README","text":"<p>Should a README.md file be created?</p> Default:<pre><code>output:\n  readme: true\n</code></pre>"},{"location":"config/#cldf-data-appendix","title":"CLDF data appendix","text":"<p>Create index and detail pages for database entities?</p> <ol> <li>This option will be set to <code>true</code> if <code>rich</code> below is true</li> <li>You can point this to a different CLDF metadata.json  file</li> </ol> Default:<pre><code>output:\n  data: false\n</code></pre>"},{"location":"config/#rich-data","title":"Rich data","text":"<p>Insert links to this data into the document?  (Slow and currently only supported for MkDocs).</p> Default:<pre><code>output:\n  rich: false\n</code></pre>"},{"location":"config/#layout","title":"Layout","text":"<p>The layout of the produced document. Options: <code>book</code>, <code>article</code>, <code>slides</code>.</p> Default:<pre><code>output:\n  layout: 'book'\n</code></pre>"},{"location":"config/#interlinear-examples","title":"Interlinear examples","text":"<p>The default options can be overridden by specifying an argument, e.g. <code>show_language=True</code>. </p>"},{"location":"config/#show-language","title":"Show language","text":"<p>Show the language label? </p> Default:<pre><code>examples:\n  show_language: true\n</code></pre>"},{"location":"config/#show-first-line","title":"Show first line","text":"<p>Show the Primary_Text line?</p> Default:<pre><code>examples:\n  show_primary: true\n</code></pre>"},{"location":"config/#source-position","title":"Source position","text":"<p>Where to place the source?  after_translation / in_preamble</p> Default:<pre><code>examples:\n  source_position: 'after_translation'\n</code></pre>"},{"location":"config/#lfts","title":"LFTS","text":"<p>Different kinds of entities whose schematic inline representation is:  <pre><code>(language) form (\u2018translation\u2019) ((source))\n</code></pre>  The default options can be overridden by specifying an argument, e.g. <code>show_language=True</code>. </p>"},{"location":"config/#show-language_1","title":"Show language","text":"Default:<pre><code>lfts:\n  show_language: true\n</code></pre>"},{"location":"config/#show-free-translation","title":"Show free translation","text":"Default:<pre><code>lfts:\n  show_translation: true\n</code></pre>"},{"location":"config/#show-source","title":"Show source","text":"Default:<pre><code>lfts:\n  show_source: true\n</code></pre>"},{"location":"config/#locations","title":"Locations","text":""},{"location":"config/#cldf-dataset-location","title":"CLDF dataset location","text":"<p>The path to the CLDF metadata file. </p> Default:<pre><code>paths:\n  cldf: 'cldf/metadata.json'\n</code></pre>"},{"location":"config/#output-folder","title":"Output folder","text":"<p>The folder to which output is written. </p> Default:<pre><code>paths:\n  output: 'output'\n</code></pre>"},{"location":"config/#additional-references","title":"Additional references","text":"<p>Path to a bibfile with references not contained in the dataset.</p> Default:<pre><code>paths:\n  add_bib: 'extra/sources.bib'\n</code></pre>"},{"location":"config/#latex","title":"LaTeX","text":"<p>LaTeX-specific settings.</p>"},{"location":"config/#article-template","title":"Article template","text":"<p>The default template for the article layout.</p> Default:<pre><code>latex:\n  article: 'article'\n</code></pre>"},{"location":"config/#book-template","title":"Book template","text":"<p>The default template for the book layout.</p> Default:<pre><code>latex:\n  book: 'book'\n</code></pre>"},{"location":"config/#interlinear-package","title":"Interlinear package","text":"<p>The preferred setup for interlinear examples in LaTeX.</p> Default:<pre><code>latex:\n  interlinear: 'expex'\n</code></pre>"},{"location":"config/#clld","title":"CLLD","text":""},{"location":"config/#database-location","title":"Database location","text":"<p>URI to the database of your CLLD app, i.e. something like <code>sqlite:///path/to/your/db.sqlite</code></p> Default:<pre><code>clld:\n  db_uri: null\n</code></pre>"},{"location":"config/#input","title":"Input","text":""},{"location":"config/#sublime-text","title":"Sublime text","text":"<p>Generate data (in the docs folder) for the Sublime text plugin.</p> Default:<pre><code>input:\n  sublime: false\n</code></pre>"},{"location":"config/#file-prefix","title":"File prefix","text":"<p>How your filenames should be prefixed, if at all.</p> Default:<pre><code>input:\n  content_file_prefix: null\n</code></pre>"},{"location":"extending/","title":"Extending","text":"<p>It is possible to provide custom templates for both models and output formats. It is also possible to create entirely new models and formats. All custom content lives in a folder called <code>pld</code> in the project folder.</p>"},{"location":"extending/#writing-templates","title":"Writing templates","text":"<p>Templates are written in jinja.</p>"},{"location":"extending/#models","title":"Models","text":"<p>Model templates live in a directory <code>pld/model_templates/&lt;model_name&gt;</code>, where <code>model_name</code> is a lowercase singular version of the table (<code>morpheme</code>, <code>example</code>, <code>cognateset</code>...). Each model has four views for which templates can be defined: inline, (inline) list, detail, index. Filenames have the scheme <code>&lt;format&gt;_&lt;view&gt;.md</code>, where <code>format</code> is are names like <code>html</code> or <code>latex</code>, e.g.:</p> <ul> <li><code>pld/model_templates/morph/html_list.md</code>: the inline list view for the morph model in HTML output</li> <li><code>pld/model_templates/text/plain_inline.md</code>: the inline view for the text model in plaintext output</li> </ul> <p>To get an idea of what model templates look like, check out the built-in templates. There is a degree of inheritance in templates, so if e.g. <code>morph/github_detail</code> is not implemented, <code>morph/plain_detail</code>, <code>morpheme/plain_detail</code> and <code>morpheme/plain_detail</code> will also be tried -- the <code>morph</code> model inherits from <code>morpheme</code>, and the <code>github</code> output format inherits from <code>plain</code>.</p>"},{"location":"extending/#formats","title":"Formats","text":"<p>Format templates live in a directory <code>pld/format_templates/&lt;format_name&gt;/&lt;template_name&gt;</code> (e.g. <code>html/slides</code>). They are cookiecutter templates, so they minimally contain the files <code>cookiecutter.json</code> and a directory <code>{{cookiecutter.name}}</code>. The contents of that folder will be in <code>output/&lt;format&gt;</code> when a project is compiled. Built-in templates will be replaced entirely (not on a file-by-file basis), so it is suggested to copy the directory of one of the built-in format templates and modify its contents.</p>"},{"location":"extending/#creating-formats","title":"Creating formats","text":"<p>If you need to change more than just the format templates, you can create your own format in <code>pld/formats.py</code>. Here is an example on how to create a modified HTML format, where todos are formatted differently, and figures are stored in a static folder.</p> <pre><code>def custom_todo(url, **kwargs):\n    return f\"&lt;span title='{url}'&gt;TODO&lt;/span&gt;\"\n\nclass CustomHTML(HTML):\n    name = \"my_html_format\"\n    figure_dir = \"static/figures\"\n\n    @classmethod\n    def todo_cmd(cls, url, *_args, **_kwargs):\n        return custom_todo(url, **_kwargs)\n\n    @classmethod\n    def figure_cmd(cls, url, *_args, **_kwargs):\n        caption = cls.figure_metadata[url].get(\"caption\", \"\")\n        filename = cls.figure_metadata[url].get(\"filename\", \"\")\n        return f\"\"\"&lt;figure&gt;\n&lt;img src=\"static/figures/{filename}\" alt=\"{caption}\" /&gt;\n&lt;figcaption id=\"fig:{url}\" aria-hidden=\"true\"&gt;{caption}&lt;/figcaption&gt;\n&lt;/figure&gt;\"\"\"\n</code></pre>"},{"location":"extending/#creating-models","title":"Creating models","text":"<p>The file <code>pld/models.py</code> should be structured as follows:</p> <pre><code>from pylingdocs.models import Base\n\nclass Phoneme(Base):\n    name = \"Phoneme\"\n    cldf_table = \"phonemes.csv\"\n    shortcut = \"pnm\"\n\nclass POS(Base):\n    name = \"POS\"\n    cldf_table = \"partsofspeech.csv\"\n    shortcut = \"pos\"\n\nclass Lexeme(Base):\n    name = \"Lexeme\"\n    cldf_table = \"lexemes.csv\"\n    shortcut = \"lex\"\n\n\nmodels = [Phoneme(), POS(), Lexeme()]\n</code></pre> <p>These are very minimal models, check out the built-in models for more examples.</p>"},{"location":"extra/","title":"Creating an index","text":"<p>To create an index of topics, provide a file <code>topic_index.csv</code>, containing a list of topics and corresponding (optionally comma-separated) section tags:</p> <p>Topic               Sections</p> <p>Spatial semantics   sec:locatives   Possession          sec:possession,sec:nounphrases</p>"},{"location":"formats/","title":"Output formats","text":"<p>As of now, the following four formats are implemented:</p>"},{"location":"formats/#mkdocs","title":"mkdocs","text":"<ul> <li>You can create an <code>mkdocs.yml</code> file in the <code>extra</code> directory, the contents of which will then overwrite the default mkdocs configuration file.</li> </ul>"},{"location":"formats/#latex","title":"LaTeX","text":""},{"location":"formats/#cldf","title":"cldf","text":""},{"location":"formats/#html","title":"HTML","text":""},{"location":"formats/#plaintext","title":"plaintext","text":""},{"location":"formats/#github-flavored-markdown","title":"Github-flavored markdown","text":"<p>TODO: DESCRIBE</p>"},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#installing-pylingdocs","title":"Installing <code>pylingdocs</code>","text":"<ol> <li>make sure you have a working python     installation (compatible versions: 3.7-3.10)</li> <li>make sure you have a working     pip setup</li> <li>(optional) create a virtual environment to work in</li> <li> <p>whatever floats your OS' boat:</p> <ol> <li><code>pip3 install pylingdocs</code></li> <li><code>pip install pylingdocs</code></li> <li><code>python3 -m pip install pylingdocs</code></li> <li><code>py -m pip install pylingdocs</code></li> <li>...</li> </ol> </li> </ol>"},{"location":"installation/#installing-dependencies","title":"Installing dependencies","text":"<ul> <li>install pandoc (minimal required version:     2.8)</li> </ul>"},{"location":"installation/#optional-dependencies","title":"Optional dependencies","text":"<ul> <li>install LaTeX, for PDF output<ul> <li>you might need to install latexmk (and some other missing packages)</li> </ul> </li> <li>install Sublime Text, for editing documents<ul> <li>install the Sublime Text plugin</li> </ul> </li> <li>install pylingdocs-gui, for editing documents</li> </ul>"},{"location":"markdown/","title":"Markdown","text":"<p>UNDER CONSTRUCTION</p>"},{"location":"markdown/#introduction","title":"Introduction","text":"<p><code>pylingdocs</code> uses a custom markdown format. Access to entities in the database (examples, morphemes, languages...) is done in the format <code>[abbr](id)</code>, where <code>abbr</code> represents the kind of entity, and <code>id</code> the ID of the entity. So if you have an example with the ID <code>narr-23</code>, you can include it in the text with the command <code>[ex](narr-23)</code>.</p>"},{"location":"markdown/#models","title":"Models","text":""},{"location":"markdown/#citing-and-references","title":"Citing and references","text":"<p>Citing sources is done by the commands <code>[src](bibkey[pages])</code> and <code>[psrc](bibkey[pages])</code>. <code>bibkey</code> is the identifier of the source (for example, a bibkey in a <code>.bib</code> file). <code>[pages]</code> is optional. For example, <code>[src](meier2009example[229-231])</code> yields <code>Meier (2009: 229-231)</code>, and <code>[psrc](meier2009example[229-231])</code> <code>(Meier 2009: 229-231)</code>.</p>"},{"location":"markdown/#interlinear-examples","title":"Interlinear examples","text":"<p>While pylingdocs takes care of the formatting of examples, there are some parameters you might want to modify. The following table shows the basic layout; <code>[]</code> mark optional content.</p> (exno) [LANGUAGE/TITLE   [SOURCE]] [PRIMARY TEXT] OBJECT LINE GLOSS LINE 'TRANSLATION'  [COMMENT]  [SOURCE]"},{"location":"markdown/#tables","title":"Tables","text":"<p>Every table has an ID; they can be inserted with the directive <code>[table](id)</code>.</p>"},{"location":"usage/","title":"Usage","text":"<p><code>pylingdocs</code> is a command line application and is executed by using <code>pylingdocs &lt;COMMAND&gt; --&lt;argument&gt;</code> (if you\\'re a wizard you can use <code>the python API &lt;modules&gt;</code>{.interpreted-text role=\"doc\"}). If you have no previous exposure to command line interfaces, you may want to read a guide like this or this[^1] -- though it appears you\\'re handling linguistic databases already. There is also an rudimentary editor with a graphical user interface.</p>"},{"location":"usage/#setting-up-a-new-project","title":"Setting up a new project","text":"<ol> <li><code>pylingdocs new</code> will let you enter some data to get started with a project<ul> <li>If you're impatient, the only information truly needed is the path to a valid CLDF metadata.json file -- just press enter for all other prompts</li> </ul> </li> <li>The project will live in a new folder, and inside you will find the     <code>docs</code> folder.     If you have installed Sublime Text, you can use <code>subl</code> to open the <code>&lt;FILENAME&gt;.sublime-project</code> file.     Otherwise, use an editor of your choice to open one or all of the     <code>.md</code> files.</li> <li>Get writing. You can use normal markdown, as well as cldfviz and pylingdocs markdown.<ul> <li>If you are using Sublime Text and the <code>pylingdocs</code> plugin, you     can activate the <code>sublime</code> option in your configuration file use <code>pylingdocs sublime</code> in your project directory. This     will activate autocompletion and also enable you to use     <code>Tools &gt; pylingdocs &gt; insert entity</code> to add data points from     your dataset.</li> </ul> </li> <li>To create output, run <code>pylingdocs build</code> in the project folder. By default, a range of output formats will be produced, in the folder <code>output</code></li> </ol>"},{"location":"usage/#project-layout","title":"Project layout","text":"<p>A project minimally consists of a folder containing markdown files, a YAML file describing how they should be combined, and a (link to a) database containing the linguistic data. You can create a new project by using <code>pylingdocs new</code> in the directory where you want your project folder to be created. For the moment, a database can only consist of <code>a CLDF dataset &lt;data_formats&gt;</code>{.interpreted-text role=\"doc\"}.</p>"},{"location":"usage/#multiple-files","title":"Multiple files","text":"<p>You can distribute your content into multiple files, which is often more practical than a single file. The order of these files is described in a YAML file, defaulting to `contents/structure.yaml`:: title: My fantastic book intro: title: Introduction verbs: title: What is a verb, anyway? results: title: Turns out, a lot comparison: title: Comparative verbistics abstract: You can put abstracts here if you like! possession: title: Person marking abstract: This is a part of the comparison chapter, but it\\'s in its own file. This would assume a file structure with 5 files, identified by <code>intro</code>, <code>verbs</code>, <code>results</code>, <code>comparison</code>, and <code>possession</code>. When using Sublime Text or some other editor that can open multiple text files but doesn\\'t know how to sort them, you can set the <code>content_file_prefix</code> option to <code>alpha</code> or <code>numerical</code> and use <code>pylingdocs update-structure</code> to rename your files. This will create filenames like <code>&lt;[A-Z]&gt; &lt;ID&gt;.md</code> or <code>&lt;\\d\\d\\d\\d&gt; &lt;ID&gt;.md</code>.</p> <p>You can also use the structure file to create files, by running <code>update-structure</code>. Any <code>.md</code> files in the content folder that are not in the structure file will be moved to a <code>bench</code> folder, in case you want to include them again later (just put them in the structure file to do so).</p>"},{"location":"usage/#writing","title":"Writing","text":"<p>Writing is done in plaintext, so you can use any old editor you like, though I strongly recommend Sublime Text or pylingdocs-gui. The basic format used is markdown, with some <code>magic sprinkled on top &lt;markdown_format&gt;</code>{.interpreted-text role=\"doc\"}. There is an autocomplete plugin for Sublime Text. If set up correctly, the plugin will show data preview snippets when typing directives like <code>mp:&lt;this_is_you_typing&gt;</code>, and will replace them with <code>[mp](id)</code>. There is also the functionality to insert entities from your dataset via the \\\"Tools\\\" menu. <code>pylingdocs-gui</code> does not have a database-editor connection yet.</p> <p>[^1]: You don\\'t need any of the server stuff, though. Just get     comfortable using the command line.</p>"},{"location":"usage/#preview","title":"Preview","text":"<p>Since creating the database feeding a CLLD app or compiling LaTeX documents can take some time, there is a preview function (<code>pylingdocs preview</code>) which uses a lighter format (plaintext). This is supposed to take away the burning uncertainty about what the commands you\\'re writing will correspond to in a document for humans. You can use <code>pylingdocs preview --html</code> to open a preview in your browser or <code>--latex</code> to create a pdf. You could also use the <code>github</code> format for previews and then use grip for previewing.</p>"},{"location":"usage/#data-formats","title":"Data formats","text":"<p>For the moment, CLDF is the only available input format, via the cldfviz tool. However, it should not be difficult to implement support for other formats, if needed.</p>"}]}