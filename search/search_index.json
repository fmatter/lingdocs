{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"pylingdocs","text":"<p>Create data-rich linguistic documents with CLDF, with a variety of output formats.</p> <p> </p> <p>Linguistic documents usually contain linguistic data, be it from primary research or sourced from the literature. The primary function of pylingdocs is to make the integration of such data as simple as possible. To achieve this, all data is stored in a CLDF dataset, while the accompanying prose is written in markdown. This means that the document that contains no data, only pointers. Changes to the data only have to be done in the dataset, and don't include tinkering with the document - no more manually italicizing object language forms. The use of markdown and opinionated-but-customizable output templates results in separation of content and presentation in general.</p> <p>To illustrate, this plain text in combination with this dataset can be turned into multiple formats:</p> <ul> <li>PDF</li> <li>HTML with MkDocs</li> <li>Github markdown</li> <li>and yes, even plain text</li> </ul> <p>It is also possible to integrate the output into CLLD web apps, using the clld-document-plugin; an example can be inspected here.</p>"},{"location":"#getting-started","title":"Getting started","text":"<ol> <li>install pylingdocs (<code>pip install pylingdocs</code>), as well as pandoc (version <code>2.8+</code>)</li> <li>create or get a CLDF dataset</li> <li>create a new project (<code>pylingdocs new</code>)</li> <li>run <code>pylingdocs build</code></li> </ol>"},{"location":"config/","title":"Configuring <code>pylingdocs</code>","text":"<p>By default, <code>pylingdocs</code> uses the config file shown below. The values in it can be overridden by creating a file <code>pylingdocs.cfg</code> in the directory where you are executing <code>pylingdocs</code>.</p> <pre><code>[paths]\n\n# the folder containing your text files\ncontent = content\n\n# the folder containing text files not (currently) included in the project\nbench = bench\n\n# the YAML file which stores your document structure\n# if this is only a filename, it is assumed to be in the content folder\nstructure_file = structure.yaml\n\n# the folder to which output is written \noutput = output\n\n# the folder where CSV for tables are stored\ntables = tables \n\n# the folder where your images are stored\nfigures = figures\n\n# the table metadata file\n# if this is a plain filename, it is assumed to be in the tables folder\ntable_metadata = table_metadata.yaml\n\nfigure_metadata = figure_metadata.yaml\n\n# the path to the CLDF metadata file \ncldf = ./cldf/metadata.json\n\n# the path to the manual example folder\nmanual_examples = ./manual_examples\n\n# path to bibfile not contained in the dataset\nadd_bib = pld_references.bib\n\n\n[output]\n\n# what formats should be built\nbuilders = plain github html latex mkdocs\n\n# what formats should be built as preview\npreview = plain html\n\n# create a README.md file?\nreadme = True\n\n\n[plain]\n\ntemplate = basic\n\n\n[latex]\n\ntemplate = article\n\ninterlinear_tool = expex\n\n[github]\n# what template to use for github\ntemplate = basic\n\n\n[clld]\n\n# what template to use for clld output\ntemplate = book\n\n# URI to the database of your CLLD app\ndb_uri = /uri/to/your/database\n\n\n[html]\n\n# what template to use for html output\ntemplate = basic\n\n[mkdocs]\n\n# what template to use for mkdocs output\ntemplate = basic\n\nrich_data = True\n\n\n[input]\n\n# where your local glossing abbreviations are stored\nabbreviation_file = abbreviations.csv\n\n# how your filenames should be prefixed, if at all\ncontent_file_prefix = None\n\n\n[examples]\n\n# show the language label? (can be overridden)\nshow_language = True\n\n# show the Primary_Text line? (can be overridden)\nshow_primary = True\n\n# where to place the source?\n# after_translation / in_preamble\nsource_position = after_translation\n\n[lfts]\n# different kinds of entities whose inline representation is: (language) form (\u2018translation\u2019) ((source))\nshow_language = True\nshow_translation = True\nshow_source = True\n</code></pre>"},{"location":"data_formats/","title":"Data formats","text":"<p>For the moment, CLDF is the only available input format, via the cldfviz tool. However, it should not be difficult to implement support for other formats, if needed.</p>"},{"location":"examples/","title":"Configuring examples","text":"<p>While pylingdocs takes care of the formatting of examples, there are some parameters you might want to modify. The following table shows the basic layout; <code>[]</code> mark optional content.</p> <p>(exno)    [LANGUAGE/TITLE [(SOURCE)]]</p> <pre><code>        \\[PRIMARY TEXT\\]\n\n        OBJECT LINE\n\n        GLOSS LINE\n\n        'TRANSLATION' \\[(COMMENT)\\]\n        \\[(SOURCE)\\]\n</code></pre> <ul> <li>show primary text?</li> <li>show language?</li> <li>title?</li> <li>show source?</li> <li>show source where?</li> <li>show comment?</li> </ul> <p>default language from config override by example basis multiple lgs in one ex -&gt; always label templates get values from central method</p>"},{"location":"extending/","title":"Creating own formats and models","text":"<p>It is possible to provide custom templates for both models and output formats, and to create new models and formats. In order</p>"},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#installing-pylingdocs","title":"Installing <code>pylingdocs</code>","text":"<ol> <li>make sure you have a working python     installation (compatible versions: 3.7-3.10)</li> <li>make sure you have a working     pip setup</li> <li>(optional) create a virtual environment to work in</li> <li> <p>whatever floats your OS' boat:</p> <ol> <li><code>pip3 install pylingdocs</code></li> <li><code>pip install pylingdocs</code></li> <li><code>python3 -m pip install pylingdocs</code></li> <li><code>py -m pip install pylingdocs</code></li> <li>...</li> </ol> </li> </ol>"},{"location":"installation/#installing-dependencies","title":"Installing dependencies","text":"<ul> <li>install pandoc (minimal required version:     2.8)</li> </ul>"},{"location":"installation/#optional-dependencies","title":"Optional dependencies","text":"<ul> <li>install LaTeX, for PDF output<ul> <li>you might need to install latexmk (and some other missing packages)</li> </ul> </li> <li>install Sublime Text, for editing documents<ul> <li>install the Sublime Text plugin</li> </ul> </li> <li>install pylingdocs-gui, for editing documents</li> </ul>"},{"location":"markdown_format/","title":"Markdown format","text":"<p>UNDER CONSTRUCTION</p>"},{"location":"markdown_format/#introduction","title":"Introduction","text":"<p><code>pylingdocs</code> uses a custom markdown format. Access to entities in the database (examples, morphemes, languages...) is done in the format <code>[abbr](id)</code>, where <code>abbr</code> represents the kind of entity, and <code>id</code> the ID of the entity. So if you have an example with the ID <code>narr-23</code>, you can include it in the text with the command <code>[ex](narr-23)</code>.</p>"},{"location":"markdown_format/#models","title":"Models","text":""},{"location":"markdown_format/#tbd","title":"TBD","text":""},{"location":"markdown_format/#citing-and-references","title":"Citing and references","text":"<p>Citing sources is done by the commands <code>[src](bibkey[pages])</code> and <code>[psrc](bibkey[pages])</code>. <code>bibkey</code> is the identifier of the source (for example, a bibkey in a <code>.bib</code> file). <code>[pages]</code> is optional. For example, <code>[src](meier2009example[229-231])</code> yields <code>Meier (2009: 229-231)</code>, and <code>[psrc](meier2009example[229-231])</code> <code>(Meier 2009: 229-231)</code>.</p>"},{"location":"markdown_format/#other-elements","title":"Other elements","text":""},{"location":"markdown_format/#tables","title":"Tables","text":"<p>Every table has an ID; they can be inserted with the directive <code>[table](id)</code>.</p>"},{"location":"markdown_format/#crossrefs","title":"Crossrefs","text":"<p>Crossrefs are not yet implemented.</p>"},{"location":"output_formats/","title":"Output formats","text":"<p>As of now, the following four formats are implemented:</p> <ul> <li>LaTeX</li> <li>Github-flavored markdown</li> <li>HTML</li> <li>plaintext</li> </ul> <p>TODO: DESCRIBE</p>"},{"location":"topic_index/","title":"Creating an index","text":"<p>To create an index of topics, provide a file <code>topic_index.csv</code>, containing a list of topics and corresponding (optionally comma-separated) section tags:</p> <p>Topic               Sections</p> <p>Spatial semantics   sec:locatives   Possession          sec:possession,sec:nounphrases</p>"},{"location":"usage/","title":"Usage","text":"<p><code>pylingdocs</code> is a command line application and is executed by using <code>pylingdocs &lt;COMMAND&gt; --&lt;argument&gt;</code> (if you\\'re a wizard you can use <code>the python API &lt;modules&gt;</code>{.interpreted-text role=\"doc\"}). If you have no previous exposure to command line interfaces, you may want to read a guide like this or this[^1] -- though it appears you\\'re handling linguistic databases already. There is also an rudimentary editor with a graphical user interface.</p>"},{"location":"usage/#quick-start","title":"Quick start","text":"<p>1. <code>pylingdocs new</code> will let you enter some data to get started with a project</p> <p>:   -   if you\\'re impatient, the only information truly needed is the         path to a valid CLDF metadata.json file</p> <ol> <li>The project will live in a new folder, and inside you will find the     [content]{.title-ref} folder. If you have installed Sublime Text,     you can use <code>subl</code> to open the <code>&lt;FILENAME&gt;.sublime-project</code> file.     Otherwise, use an editor of your choice to open one or all of the     <code>.md</code> files.</li> </ol> <p>3. Get writing. You can use normal markdown, as well as cldfviz and <code>pylingdocs markdown &lt;markdown_format&gt;</code>{.interpreted-text role=\"doc\"}.</p> <p>:   -   if you are using Sublime Text and the <code>pylingdocs</code> plugin, you         can use <code>pylingdocs sublime</code> in your project directory. This         will activate autocompletion and also enable you to use         <code>Tools &gt; pylingdocs &gt; insert entity</code> to add data points from         your dataset.</p> <p>4. To create output, run <code>pylingdocs build</code> in the project folder. By default, a <code>range of output formats &lt;data_formats&gt;</code>{.interpreted-text role=\"doc\"} will be produced, in the folder <code>output</code></p> <p>:   -   you can add the option <code>--latex</code> to create a PDF from the         generated <code>.tex</code> file. Note: you need to have a working LaTeX         installation with <code>latexmk</code> for this.</p>"},{"location":"usage/#projects","title":"Projects","text":"<p>A project minimally consists of a folder containing markdown files, a YAML file describing how they should be combined, and a (link to a) database containing the linguistic data. You can create a new project by using <code>pylingdocs new</code> in the directory where you want your project folder to be created. For the moment, a database can only consist of <code>a CLDF dataset &lt;data_formats&gt;</code>{.interpreted-text role=\"doc\"}.</p>"},{"location":"usage/#multiple-files","title":"Multiple files","text":"<p>You can distribute your content into multiple files, which is often more practical than a single file. The order of these files is described in a YAML file, defaulting to `contents/structure.yaml`:: title: My fantastic book intro: title: Introduction verbs: title: What is a verb, anyway? results: title: Turns out, a lot comparison: title: Comparative verbistics abstract: You can put abstracts here if you like! possession: title: Person marking abstract: This is a part of the comparison chapter, but it\\'s in its own file. This would assume a file structure with 5 files, identified by <code>intro</code>, <code>verbs</code>, <code>results</code>, <code>comparison</code>, and <code>possession</code>. When using Sublime Text or some other editor that can open multiple text files but doesn\\'t know how to sort them, you can set the <code>content_file_prefix</code> option to <code>alpha</code> or <code>numerical</code> and use <code>pylingdocs update-structure</code> to rename your files. This will create filenames like <code>&lt;[A-Z]&gt; &lt;ID&gt;.md</code> or <code>&lt;\\d\\d\\d\\d&gt; &lt;ID&gt;.md</code>.</p> <p>You can also use the structure file to create files, by running <code>update-structure</code>. Any <code>.md</code> files in the content folder that are not in the structure file will be moved to a <code>bench</code> folder, in case you want to include them again later (just put them in the structure file to do so).</p>"},{"location":"usage/#writing","title":"Writing","text":"<p>Writing is done in plaintext, so you can use any old editor you like, though I strongly recommend Sublime Text or pylingdocs-gui. The basic format used is markdown, with some <code>magic sprinkled on top &lt;markdown_format&gt;</code>{.interpreted-text role=\"doc\"}. There is an autocomplete plugin for Sublime Text. If set up correctly, the plugin will show data preview snippets when typing directives like <code>mp:&lt;this_is_you_typing&gt;</code>, and will replace them with <code>[mp](id)</code>. There is also the functionality to insert entities from your dataset via the \\\"Tools\\\" menu. <code>pylingdocs-gui</code> does not have a database-editor connection yet.</p>"},{"location":"usage/#preview","title":"Preview","text":"<p>Since creating the database feeding a CLLD app or compiling LaTeX documents can take some time, there is a preview function (<code>pylingdocs preview</code>) which uses a lighter format (plaintext). This is supposed to take away the burning uncertainty about what the commands you\\'re writing will correspond to in a document for humans. You can use <code>pylingdocs preview --html</code> to open a preview in your browser or <code>--latex</code> to create a pdf. You could also use the <code>github</code> format for previews and then use grip for previewing.</p>"},{"location":"usage/#commands","title":"Commands","text":"<p>The central and only necessary command is <code>pylingdocs build</code>, which transforms the pylingdocs-flavored markdown into the specified output formats. Below, the other commands are listed; you can also see them by calling <code>pylingdocs --help</code>. For the default values of most arguments, check out <code>the default config file &lt;config&gt;</code>{.interpreted-text role=\"doc\"}.</p> <p>[^1]: You don\\'t need any of the server stuff, though. Just get     comfortable using the command line.</p>"}]}